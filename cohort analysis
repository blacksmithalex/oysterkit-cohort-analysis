{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "40e18619",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order Number</th>\n",
       "      <th>Subscription Start Date</th>\n",
       "      <th>renewal order</th>\n",
       "      <th>Customer Total Orders</th>\n",
       "      <th>Order Status</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>First Name (Billing)</th>\n",
       "      <th>Last Name (Billing)</th>\n",
       "      <th>Email (Billing)</th>\n",
       "      <th>Phone (Billing)</th>\n",
       "      <th>...</th>\n",
       "      <th>Subscriber email</th>\n",
       "      <th>Subscription Last order date</th>\n",
       "      <th>Subscription On hold date</th>\n",
       "      <th>Subscription Cancelleted date</th>\n",
       "      <th>Subscription End date</th>\n",
       "      <th>Subscription Coupon</th>\n",
       "      <th>Subscription Total refund</th>\n",
       "      <th>Subscription Total revenue</th>\n",
       "      <th>Start Month</th>\n",
       "      <th>End Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>128186</td>\n",
       "      <td>2021-06-01 03:09:20</td>\n",
       "      <td>122879.0</td>\n",
       "      <td>5</td>\n",
       "      <td>Processing</td>\n",
       "      <td>2021-09-30 20:12:09</td>\n",
       "      <td>Debra</td>\n",
       "      <td>Passarella</td>\n",
       "      <td>debra.passarella@gmail.com</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>debra.passarella@gmail.com</td>\n",
       "      <td>2021-09-30 20:12:09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>119.85</td>\n",
       "      <td>06-2021</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>128184</td>\n",
       "      <td>2021-10-01 01:26:35</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>Processing</td>\n",
       "      <td>2021-09-30 18:26:35</td>\n",
       "      <td>Brooks</td>\n",
       "      <td>Johnson</td>\n",
       "      <td>victoria.johnson@outlook.com</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>victoria.johnson@outlook.com</td>\n",
       "      <td>2021-09-30 18:26:35</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10-2021</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>128183</td>\n",
       "      <td>2021-08-01 00:40:54</td>\n",
       "      <td>126373.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Processing</td>\n",
       "      <td>2021-09-30 17:42:09</td>\n",
       "      <td>John</td>\n",
       "      <td>Cozzi</td>\n",
       "      <td>bigdawgcoz10@gmail.com</td>\n",
       "      <td>2095096317</td>\n",
       "      <td>...</td>\n",
       "      <td>bigdawgcoz10@gmail.com</td>\n",
       "      <td>2021-09-30 17:42:09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>43.25</td>\n",
       "      <td>08-2021</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>128182</td>\n",
       "      <td>2021-07-31 23:55:01</td>\n",
       "      <td>126368.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Processing</td>\n",
       "      <td>2021-09-30 16:55:03</td>\n",
       "      <td>Tiyi</td>\n",
       "      <td>Smith</td>\n",
       "      <td>tiyi56@yahoo.com</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>tiyi56@yahoo.com</td>\n",
       "      <td>2021-09-30 16:55:03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.95</td>\n",
       "      <td>07-2021</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>128180</td>\n",
       "      <td>2021-09-30 22:27:08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>Processing</td>\n",
       "      <td>2021-09-30 15:27:08</td>\n",
       "      <td>Barbara</td>\n",
       "      <td>Delcambre</td>\n",
       "      <td>barbara.delcambre@yahoo.com</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>barbara.delcambre@yahoo.com</td>\n",
       "      <td>2021-09-30 15:27:08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>09-2021</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Order Number Subscription Start Date  renewal order  Customer Total Orders  \\\n",
       "0        128186     2021-06-01 03:09:20       122879.0                      5   \n",
       "1        128184     2021-10-01 01:26:35            NaN                      1   \n",
       "2        128183     2021-08-01 00:40:54       126373.0                      3   \n",
       "3        128182     2021-07-31 23:55:01       126368.0                      3   \n",
       "4        128180     2021-09-30 22:27:08            NaN                      1   \n",
       "\n",
       "  Order Status          Order Date First Name (Billing) Last Name (Billing)  \\\n",
       "0   Processing 2021-09-30 20:12:09                Debra          Passarella   \n",
       "1   Processing 2021-09-30 18:26:35               Brooks             Johnson   \n",
       "2   Processing 2021-09-30 17:42:09                 John               Cozzi   \n",
       "3   Processing 2021-09-30 16:55:03                 Tiyi               Smith   \n",
       "4   Processing 2021-09-30 15:27:08              Barbara           Delcambre   \n",
       "\n",
       "                Email (Billing) Phone (Billing)  ...  \\\n",
       "0    debra.passarella@gmail.com             NaN  ...   \n",
       "1  victoria.johnson@outlook.com             NaN  ...   \n",
       "2        bigdawgcoz10@gmail.com      2095096317  ...   \n",
       "3              tiyi56@yahoo.com             NaN  ...   \n",
       "4   barbara.delcambre@yahoo.com             NaN  ...   \n",
       "\n",
       "               Subscriber email Subscription Last order date  \\\n",
       "0    debra.passarella@gmail.com          2021-09-30 20:12:09   \n",
       "1  victoria.johnson@outlook.com          2021-09-30 18:26:35   \n",
       "2        bigdawgcoz10@gmail.com          2021-09-30 17:42:09   \n",
       "3              tiyi56@yahoo.com          2021-09-30 16:55:03   \n",
       "4   barbara.delcambre@yahoo.com          2021-09-30 15:27:08   \n",
       "\n",
       "   Subscription On hold date  Subscription Cancelleted date  \\\n",
       "0                        NaN                            NaN   \n",
       "1                        NaN                            NaN   \n",
       "2                        NaN                            NaN   \n",
       "3                        NaN                            NaN   \n",
       "4                        NaN                            NaN   \n",
       "\n",
       "   Subscription End date  Subscription Coupon  Subscription Total refund  \\\n",
       "0                    NaN                  NaN                        0.0   \n",
       "1                    NaN                  NaN                        0.0   \n",
       "2                    NaN                  NaN                        0.0   \n",
       "3                    NaN                  NaN                        0.0   \n",
       "4                    NaN                  NaN                        0.0   \n",
       "\n",
       "  Subscription Total revenue  Start Month  End Month  \n",
       "0                     119.85      06-2021        NaN  \n",
       "1                       0.00      10-2021        NaN  \n",
       "2                      43.25      08-2021        NaN  \n",
       "3                      39.95      07-2021        NaN  \n",
       "4                       0.00      09-2021        NaN  \n",
       "\n",
       "[5 rows x 37 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import numpy as np\n",
    "df = pd.read_excel('Выгрузка 2021.xlsx')\n",
    "dfstart = pd.read_excel('Выгрузка 2021.xlsx')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4bf774a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def update_sub_start_date(df):\n",
    "    print('Добавляем значения в поле Subscription Start Date для Bundle и Gift.')\n",
    "    a = list(df['Subscription Start Date'])\n",
    "    b = list(df['Order Date'])\n",
    "\n",
    "    for i in range(len(a)):\n",
    "        if str(a[i]) == 'nan':\n",
    "            a[i] = str(b[i])\n",
    "    df['Subscription Start Date'] = a\n",
    "    return df\n",
    "\n",
    "def update_full_names_for_catefories(df):\n",
    "    print('Переименовываем названия наборов.')\n",
    "    a = list(df['Full names for categories'])\n",
    "    for i in range(len(a)):\n",
    "        try:\n",
    "            rez = ''\n",
    "            if '3+' in a[i]:\n",
    "                rez += '3+'\n",
    "            if '5+' in a[i]:\n",
    "                rez += '5+'\n",
    "            if 'C&' in a[i] or '8+' in a[i]:\n",
    "                rez += '8+'\n",
    "            if len(rez) > 0:\n",
    "                a[i] = rez\n",
    "        except:\n",
    "            continue\n",
    "    df['Full names for categories'] = a\n",
    "    return df\n",
    "\n",
    "def del_test_coupons(df):\n",
    "    print('Удаляем тестовые купоны.')\n",
    "    coupons = list(df['Coupon Code'])\n",
    "    for i in range(len(coupons)):\n",
    "        try:\n",
    "            if 'test' in coupons[i] or 'altdev' in coupons[i] or 'Altdev' in coupons[i]:\n",
    "                coupons[i] = 'test'\n",
    "        except:\n",
    "            continue\n",
    "    df['Coupon Code'] = coupons\n",
    "    df.drop(df[df['Coupon Code'].isin(['test'])].index,inplace = True)\n",
    "    return df             \n",
    "\n",
    "def del_wrong_mails(df):\n",
    "    print('Удалем некорректные почты.')\n",
    "    d = ['F0e0n0i0k0s@gmail.com', 'masha20795@gmail.com','test@test.by',\n",
    "         'mkrasnoschekova@gmail.com','anton.rogozhkin@gmail.com','plokhotnov@gmail.com','Ksenia_levenkova@yahoo.com']\n",
    "    mails = list(df['Email (Billing)'])\n",
    "    for i in range(len(mails)):\n",
    "        if '@oysterkit.com' in mails[i] or '.ru' in mails[i]:\n",
    "            mails[i] = 'test'\n",
    "    df['Email (Billing)'] = mails\n",
    "    df.drop(df[df['Email (Billing)'].isin(['test'])].index,inplace = True)\n",
    "    return df\n",
    "\n",
    "def add_sub_month(df):\n",
    "    print('Добавляем столбцы sub_month к таблице.')\n",
    "    a = list(df['Subscription Start Date'])\n",
    "    for i in range(len(a)):\n",
    "        try:\n",
    "            a[i] = a[i].split()[0][:-3]\n",
    "        except:\n",
    "            a[i] = 'NaN'      \n",
    "    df['sub_month'] = a\n",
    "    return df\n",
    "\n",
    "def rename_Item_name(df,file):\n",
    "    print('Приводим к одному названию поле Item Name.')\n",
    "    f = open(file)\n",
    "    d = {}\n",
    "    line = f.readline()\n",
    "    while line:\n",
    "        x = line.split('//')\n",
    "        d[x[0].strip()] = x[1].strip()\n",
    "        line = f.readline()\n",
    "    names = list(df['Item Name'])\n",
    "    for i in range(len(names)):\n",
    "        try:\n",
    "            names[i] = d[names[i].strip()]\n",
    "        except:\n",
    "            names[i] = 'test'\n",
    "    df['Item Name'] = names\n",
    "    return df\n",
    "\n",
    "def add_year_and_month(df):\n",
    "    print('Добавляем столбец Year и Month.')\n",
    "    a = df['Order Date']\n",
    "    year = []\n",
    "    month = []\n",
    "    for x in a:\n",
    "        r = str(x).split()[0].split('-')\n",
    "        year.append(r[0])\n",
    "        month.append(int(r[1]))\n",
    "    df['Year'] = year\n",
    "    df['Month'] = month\n",
    "    \n",
    "    return df\n",
    "\n",
    "def del_rus_names(df):\n",
    "    print('Удаляем русифицированные имена и фамилии.')\n",
    "    l = []\n",
    "    for x in range(1040,1104):\n",
    "        l.append(chr(x))\n",
    "\n",
    "    fname = list(df['First Name (Billing)'])\n",
    "    lname = list(df['Last Name (Billing)'])\n",
    "\n",
    "    for i in range(len(fname)):\n",
    "        try:\n",
    "            for x in l:\n",
    "                if x in fname[i]:\n",
    "                    fname[i] = 'test'\n",
    "        except:\n",
    "            continue\n",
    "    for i in range(len(lname)):\n",
    "        try:\n",
    "            for x in l:\n",
    "                if x in lname[i]:\n",
    "                    lname[i] = 'test'\n",
    "        except:\n",
    "            continue\n",
    "    df['First Name (Billing)'] = fname\n",
    "    df['Last Name (Billing)'] = lname\n",
    "\n",
    "    df.drop(df[df['First Name (Billing)'].isin(['test'])].index,inplace = True)\n",
    "    df.drop(df[df['Last Name (Billing)'].isin(['test'])].index,inplace = True)\n",
    "    return df\n",
    "\n",
    "def del_test_orders(df):\n",
    "    print('Удаляем тестовые заказы.')\n",
    "    bad_names = ['test','AltestTest','test 1','test 2','Test',\n",
    "                 'alttest','Alttest','Altestat','test2','Test1','Test2','Ulugbek','ulugbek','Zayniev','zayniev']\n",
    "    df.drop(df[df['Item Name'].isin(['test'])].index,inplace = True)\n",
    "    df.drop(df[df['Last Name (Billing)'].isin(bad_names)].index,inplace = True)\n",
    "    df.drop(df[df['First Name (Billing)'].isin(bad_names)].index,inplace = True)\n",
    "    df.drop(df[df['Order Status'].isin(['Failed'])].index,inplace = True)\n",
    "    return df        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "70b41fd8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Добавляем значения в поле Subscription Start Date для Bundle и Gift.\n",
      "Удалем некорректные почты.\n",
      "Удаляем тестовые купоны.\n",
      "Приводим к одному названию поле Item Name.\n",
      "Переименовываем названия наборов.\n",
      "Удаляем тестовые заказы.\n",
      "Удаляем русифицированные имена и фамилии.\n",
      "Добавляем столбец Year и Month.\n",
      "Добавляем столбцы sub_month к таблице.\n"
     ]
    }
   ],
   "source": [
    "df = update_sub_start_date(df)\n",
    "df = del_wrong_mails(df)\n",
    "df = del_test_coupons(df)\n",
    "df = rename_Item_name(df,'lines.txt')\n",
    "df = update_full_names_for_catefories(df)\n",
    "df = del_test_orders(df)\n",
    "df = del_rus_names(df)\n",
    "df = add_year_and_month(df)\n",
    "df = add_sub_month(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3bb7e19b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df3 = df[df['Full names for categories'].isin(['3+','3+5+','3+5+8+'])]\n",
    "df5 = df[df['Full names for categories'].isin(['5+','3+5+','3+5+8+'])]\n",
    "df8 = df[df['Full names for categories'].isin(['8+','3+5+','3+5+8+'])]\n",
    "\n",
    "pivot_quantity3 = pd.pivot_table(df3,index = ['sub_month','Item Name'],columns = ['Year','Month'],values = ['Quantity'],aggfunc=len)\n",
    "pivot_order_total_amount3 = pd.pivot_table(df3,index = ['sub_month','Item Name'],columns = ['Year','Month'],values = ['Order Total Amount'],aggfunc = np.sum)\n",
    "pivot_order_refund_amount3 = pd.pivot_table(df3,index = ['sub_month','Item Name'],columns = ['Year','Month'],values = ['Order Refund Amount'],aggfunc = np.sum)\n",
    "\n",
    "pivot_quantity5 = pd.pivot_table(df5,index = ['sub_month','Item Name'],columns = ['Year','Month'],values = ['Quantity'],aggfunc=len)\n",
    "pivot_order_total_amount5 = pd.pivot_table(df5,index = ['sub_month','Item Name'],columns = ['Year','Month'],values = ['Order Total Amount'],aggfunc = np.sum)\n",
    "pivot_order_refund_amount5 = pd.pivot_table(df5,index = ['sub_month','Item Name'],columns = ['Year','Month'],values = ['Order Refund Amount'],aggfunc = np.sum)\n",
    "\n",
    "pivot_quantity8 = pd.pivot_table(df8,index = ['sub_month','Item Name'],columns = ['Year','Month'],values = ['Quantity'],aggfunc=len)\n",
    "pivot_order_total_amount8 = pd.pivot_table(df8,index = ['sub_month','Item Name'],columns = ['Year','Month'],values = ['Order Total Amount'],aggfunc = np.sum)\n",
    "pivot_order_refund_amount8 = pd.pivot_table(df8,index = ['sub_month','Item Name'],columns = ['Year','Month'],values = ['Order Refund Amount'],aggfunc = np.sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1fd20e93",
   "metadata": {},
   "outputs": [],
   "source": [
    "with pd.ExcelWriter('cohort analysis new v2.xlsx') as writer:  \n",
    "    dfstart.to_excel(writer, sheet_name = 'сырая выгрузка (2021)')\n",
    "    df.to_excel(writer, sheet_name = 'обработанная таблица')\n",
    "    \n",
    "    pivot_quantity3.to_excel(writer, sheet_name = 'quantity 3+')\n",
    "    pivot_order_total_amount3.to_excel(writer, sheet_name = 'total_amount 3+')\n",
    "    pivot_order_refund_amount3.to_excel(writer, sheet_name = 'total_refund 3+')\n",
    "    \n",
    "    pivot_quantity5.to_excel(writer, sheet_name = 'quantity 5+')\n",
    "    pivot_order_total_amount5.to_excel(writer, sheet_name = 'total_amount 5+')\n",
    "    pivot_order_refund_amount5.to_excel(writer, sheet_name = 'total_refund 5+')\n",
    "    \n",
    "    pivot_quantity8.to_excel(writer, sheet_name = 'quantity 8+')\n",
    "    pivot_order_total_amount8.to_excel(writer, sheet_name = 'total_amount 8+')\n",
    "    pivot_order_refund_amount8.to_excel(writer, sheet_name = 'total_refund 8+')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "637a76f2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
